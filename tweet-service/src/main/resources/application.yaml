server:
  port: 8083

spring:
  application:
    name: tweet-service
  data:
    redis:
      host: localhost
      port: 6379
    mongodb:
      uri: ${MONGO_URI:mongodb://${MONGO_USER:root}:${MONGO_PASSWORD:1234}@${MONGO_HOST:localhost}:${MONGO_PORT:27017}}
      database: ${MONGO_DB:tweet_service}
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9000/realms/twitter
  cache:
    type: redis
  rabbitmq:
    host: localhost
    port: 5672
    username: admin
    password: admin
    listener:
      simple:
        default-requeue-rejected: false
eureka:
  client:
    service-url:
      default-zone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true

app:
  services:
    media-service:
      url: http://localhost:8082
    profile-service:
      url: http://localhost:8081
  rabbitmq:
    exchange:
      tweet-events: tweet.events.exchange
    queue:
      tweet-created: tweet.created.queue
      tweet-liked: tweet.liked.queue
      tweet-deleted: tweet.deleted.queue
    routing-key:
      tweet-created: tweet.event.created
      tweet-liked: tweet.event.liked
      tweet-deleted: tweet.event.deleted

management:
  endpoints:
    web:
      exposure:
        include: ["health", "routes", "metrics", "info"]
  info:
    env:
      enabled: true
info:
  app:
    name: tweet-service

#logging:
#  level:
#    org.springframework.web: debug
#    org.springframework.security: debug
#    org.springframework.security.web: debug
#    org.springframework.web.cors: debug
#    org.springframework.web.filter.CorsFilter: debug