version: '3.8'

services:
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: start-dev
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_DB: mysql
      KC_DB_URL: jdbc:mysql://mysql:3306/keycloak
      KC_DB_USERNAME: keycloak_user
      KC_DB_PASSWORD: keycloak_user
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true

      KC_EVENT_LISTENERS: default,rabbitmq-event-listener

      KC_SPI_EVENTS_LISTENER_RABBITMQ_EVENT_LISTENER_HOST: rabbitmq
      KC_SPI_EVENTS_LISTENER_RABBITMQ_EVENT_LISTENER_PORT: 5672
      KC_SPI_EVENTS_LISTENER_RABBITMQ_EVENT_LISTENER_USERNAME: admin
      KC_SPI_EVENTS_LISTENER_RABBITMQ_EVENT_LISTENER_PASSWORD: admin
      KC_SPI_EVENTS_LISTENER_RABBITMQ_EVENT_LISTENER_VIRTUAL_HOST: /
      KC_SPI_EVENTS_LISTENER_RABBITMQ_EVENT_LISTENER_EXCHANGE_NAME: identity.events.exchange
      KC_SPI_EVENTS_LISTENER_RABBITMQ_EVENT_LISTENER_ROUTING_KEY_USER_REGISTERED: identity.event.registered
    ports:
      - "9000:8080"
    volumes:
      - ./themes:/opt/keycloak/themes/
      - ./providers:/opt/keycloak/providers/
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  mysql:
    container_name: mysql
    image: mysql:latest
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 1234
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost", "-uroot", "-p1234" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  mongodb:
    container_name: mongodb
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 1234
      MONGO_INITDB_DATABASE: tweet_service
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: [ "CMD", "mongosh", "mongodb://root:1234@localhost:27017/admin", "--eval", "process.exit(db.adminCommand('ping').ok === 1 ? 0 : 1)" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"     # RabbitMQ default port
      - "15672:15672"   # RabbitMQ management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  elasticsearch-setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.2
    container_name: elasticsearch-setup
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem \
            --in config/certs/instances.yml \
            --out config/certs/certs.zip \
            --ca-cert config/certs/ca/ca.crt \
            --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting permissions";
        chown -R root:root config/certs;
        find config/certs -type d -exec chmod 750 {} \;;
        find config/certs -type f -exec chmod 640 {} \;;
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.2
    container_name: es01
    ports:
      - "9200:9200"
    environment:
      - node.name=es01
      - cluster.name=dev-cluster
      - discovery.type=single-node
      - ELASTIC_PASSWORD=admin
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
#      - xpack.security.http.ssl.key=certs/es01/es01.key
#      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
#      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.license.self_generated.type=basic
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 2g
    volumes:
#      - certs:/usr/share/elasticsearch/config/certs
      - es-data:/usr/share/elasticsearch/data
    healthcheck:
      test: [
        "CMD-SHELL",
        "curl -s -u elastic:admin http://localhost:9200 | grep -q '\"cluster_name\"'"
      ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:9.0.2
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      SERVERNAME: kibana
      ELASTICSEARCH_HOSTS: http://es01:9200
      ELASTICSEARCH_SERVICEACCOUNTTOKEN: AAEAAWVsYXN0aWMva2liYW5hL3Rva2VuXzVpbUx4cGNCN3hKQ2pIdXRxajN4OnlBZUw5UzI3UWoyZW55WGpiR3l5WkE
      ELASTICSEARCH_SSL_VERIFICATIONMODE: none
#      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: config/certs/ca/ca.crt
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: a883b2798cc00e3379eee12153b9d9d0a883b2798cc00e3379eee12153b9d9d0
      XPACK_REPORTING_ENCRYPTIONKEY: 0d764560b32e2508ccc97dc38662cf170d764560b32e2508ccc97dc38662cf17
      XPACK_SECURITY_ENCRYPTIONKEY: a10e8caca04e91b61b04c8eeef92946ea10e8caca04e91b61b04c8eeef92946e
    volumes:
#      - certs:/usr/share/kibana/config/certs
      - kibana-data:/usr/share/kibana/data
    deploy:
      resources:
        limits:
          memory: 2g
    healthcheck:
      test: [
        "CMD-SHELL",
        "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"
      ]
      interval: 10s
      timeout: 10s
      retries: 120

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: azurite
    ports:
      - "10000:10000"   # Blob service
      - "10001:10001"   # Queue service
      - "10002:10002"   # Table service
    command: [ "azurite", "--blobHost", "0.0.0.0", "--queueHost", "0.0.0.0", "--tableHost", "0.0.0.0" ]
    volumes:
      - azurite-data:/data

#  azurite-init:
#    image: mcr.microsoft.com/azure-cli
#    container_name: azurite-init
#    depends_on:
#      azurite:
#        condition: service_healthy
#    environment:
#      AZURE_STORAGE_CONNECTION_STRING: |
#        DefaultEndpointsProtocol=http;
#        AccountName=devstoreaccount1;
#        AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;
#        BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;
#        QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;
#        TableEndpoint=http://127.0.0.1:10002/devstoreaccount1;
#    entrypoint: |
#      sh -c "\
#        az storage container create --name mycontainer --connection-string \"$AZURE_STORAGE_CONNECTION_STRING\" && \
#        az storage container set-permission --name mycontainer --public-access blob --connection-string \"$AZURE_STORAGE_CONNECTION_STRING\" \
#      "
#    restart: "no"

volumes:
  mysql-data:
  azurite-data:
  redis-data:
  mongo-data:
  certs:
  es-data:
  kibana-data:

#$env:AZURE_STORAGE_CONNECTION_STRING = "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;"
#az storage container set-permission --name twitter --public-access blob --connection-string "$env:AZURE_STORAGE_CONNECTION_STRING"